#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF_Service_App
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
    using System.Configuration;

    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WCF_DB")]
	public partial class DataClasses1DataContext : DataContext
	{
		
		private static MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployer(Employer instance);
    partial void UpdateEmployer(Employer instance);
    partial void DeleteEmployer(Employer instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(ConfigurationManager.ConnectionStrings["connection"].ConnectionString)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(IDbConnection connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Table<Employer> Employers
		{
			get
			{
				return this.GetTable<Employer>();
			}
		}
	}
	
	[TableAttribute(Name="dbo.Employers")]
	public partial class Employer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FIO;
		
		private string _Addresss;
		
		private int _Phone;
		
		private string _Email;
		
		private string _Datebirth;
		
		private string _Salary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFIOChanging(string value);
    partial void OnFIOChanged();
    partial void OnAddresssChanging(string value);
    partial void OnAddresssChanged();
    partial void OnPhoneChanging(int value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDatebirthChanging(string value);
    partial void OnDatebirthChanged();
    partial void OnSalaryChanging(string value);
    partial void OnSalaryChanged();
    #endregion
		
		public Employer()
		{
			OnCreated();
		}
		
		[ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", 
            IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[ColumnAttribute(Storage="_FIO", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FIO
		{
			get
			{
				return this._FIO;
			}
			set
			{
				if ((this._FIO != value))
				{
					this.OnFIOChanging(value);
					this.SendPropertyChanging();
					this._FIO = value;
					this.SendPropertyChanged("FIO");
					this.OnFIOChanged();
				}
			}
		}
		
		[ColumnAttribute(Storage="_Addresss", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Addresss
		{
			get
			{
				return this._Addresss;
			}
			set
			{
				if ((this._Addresss != value))
				{
					this.OnAddresssChanging(value);
					this.SendPropertyChanging();
					this._Addresss = value;
					this.SendPropertyChanged("Addresss");
					this.OnAddresssChanged();
				}
			}
		}
		
		[ColumnAttribute(Storage="_Phone", DbType="Int NOT NULL")]
		public int Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[ColumnAttribute(Storage="_Datebirth", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Datebirth
		{
			get
			{
				return this._Datebirth;
			}
			set
			{
				if ((this._Datebirth != value))
				{
					this.OnDatebirthChanging(value);
					this.SendPropertyChanging();
					this._Datebirth = value;
					this.SendPropertyChanged("Datebirth");
					this.OnDatebirthChanged();
				}
			}
		}
		
		[ColumnAttribute(Storage="_Salary", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
